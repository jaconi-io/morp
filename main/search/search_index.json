{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>MORP is a multi-tenant OpenID Connect reverse proxy. With MORP you can protect web services and applications that do not support authentication on their own. MORP takes care of the OpenID Connect \"dance\" using common identity providers like Google, GitHub, Okta, and Keycloak.</p>"},{"location":"#motivation","title":"Motivation","text":"<p>There are several excellent OAuth2 and OpenID Connect proxies out there today that can be used to protect you backend apps. However, existing implementations typically only support a single tenant (with a single identity provider). MORP aims at making multi-tenancy a first class citizen so that you can run apps on behalf of different tenants that may be using different identity providers to authenticate users.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Flexible tenant identification based host name, request paths or headers</li> <li>Fully templatized IDP configuration</li> <li>Dynamic discovery of IDP secrets</li> <li>Planned Persistence of IDP state for high availability</li> </ul>"},{"location":"#demo","title":"Demo","text":"<p>This project contains an example showing how to protect a httpbin instance using authentication with Keycloak. Run the example by switching to the example folder and using <code>docker compose</code>:</p> <pre><code>docker compose -f compose/docker-compose.yaml -f compose/docker-compose.demo.yaml up\n</code></pre> <p>Open http://foo.localtest.me:8080 in your browser and log in with the username <code>test.user@jaconi.io</code> and the password <code>user</code>. To use a different tenant, open http://bar.localtest.me:8080 in your browser and log in with username <code>test.user@example.com</code> and the password <code>user</code>.</p> <p>If you are having troubles accessing http://localtest.me, see DNS Rebind Protection.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>To configure MORP three terms are essential: provider, registration, and tenant. Configuration of all three is covered in the next sections.</p>"},{"location":"configuration/#provider","title":"Provider","text":"<p>A provider refers to an identity provider (IDP). Common IDPs include Google, Okta, and Keycloak. Providers are configured in the <code>morp.oauth-client.provider</code> section. A minimal provider configuration for a single Keycloak realm looks like this:</p> <pre><code>morp:\n  oauth2-client:\n    provider:\n      keycloak:\n        issuer-uri: https://keycloak.example.com/realms/example\n</code></pre> <p>The providers name (<code>keycloak</code>, in the example above) can be any identifier. Every provider can have the following properties:</p> Property Example <code>authorization-uri</code> <code>https://example.com/authorize</code> <code>token-uri</code> <code>https://example.com/token</code> <code>jwk-set-uri</code> <code>https://example.com/jwks.json</code> <code>user-info-uri</code> <code>https://example.com/userinfo</code> <code>user-info-authentication-method</code> <code>header</code> <code>userNameAttribute</code> <code>name</code> <p>Alternatively, an <code>issuer-uri</code> can be specified to automatically get the identity providers configuration.</p> <p>Properties in the provider section can be templated, to include the tenant (see below). To use a Keycloak realm per tenant, use the following configuration:</p> <pre><code>morp:\n  oauth2-client:\n    provider:\n      keycloak:\n        issuer-uri: https://keycloak.example.com/realms/{tenant}\n</code></pre>"},{"location":"configuration/#registration","title":"Registration","text":"<p>Providers cannot be used for authentication by default. A registration is required to specify additional configuration. This allows multiple registrations per provider. Registrations are configured in the documentations <code>morp.oauth-client.registration</code> section:</p> <pre><code>morp:\n  oauth2-client:\n    registration:\n      keycloak:\n        client-id: my-client-id\n        client-secret: my-client-secret\n        scope:\n          - openid\n          - profile\n          - email\n</code></pre> <p>The following properties are supported:</p> Property Example <code>client-id</code> my-client-id <code>client-secret</code> my-client-secret <code>client-name</code> My Client <code>provider</code> keycloak <code>scope</code> user <code>redirect-uri-template</code> https://example.com <code>client-authentication-method</code> basic <code>authorization-grant-type</code> authorization_code <p>Usually, only <code>client-id</code> and <code>client-secret</code> are required.</p>"},{"location":"configuration/#tenant","title":"Tenant","text":"<p>A tenant is the entity determining the registration to be used. This might be a customer, an application or a department. To figure out the tenant for a request, MORP uses predicates. See Tenant Extraction for details.</p>"},{"location":"deployment/","title":"Deployment Guide","text":"<p>Coming soon</p>"},{"location":"user-guide/caching/","title":"Client Registration Caching","text":""},{"location":"user-guide/diagnostics/","title":"Diagnostics","text":"<p>MORP comes with actuator endpoints to help diagnosing routing and request authentication issues. The Spring actuator endpoints are exposed on port 8081 by default. You may find the following endpoints most useful:</p> <ul> <li>GET <code>/actuator/gateway/routes</code> provides a list of routes configured.</li> <li>GET <code>/actuator/gateway/routes/{id}</code> provides details about a given route based on its ID.</li> <li>GET <code>/actuator/clientregistrations</code> provides a list of tenants for which client registrations have been created   dynamically.</li> <li>GET <code>/actuator/clientregistrations/{tenant}</code> provides details of a client registration for a given tenant.</li> </ul>"},{"location":"user-guide/dns-rebind-protection/","title":"DNS Rebind Protection","text":"<p>If you are having troubles accessing http://localtest.me, check if your router does DNS rebind protection. There are various options to avoid this problem.</p>"},{"location":"user-guide/dns-rebind-protection/#add-exception","title":"Add Exception","text":"<p>You can add an exception for the following domains in your routers configuration:</p> <pre><code>bar.localtest.me\nfoo.localtest.me\nkeycloak.localtest.me\n</code></pre> <p>For instructions see your router vendors documentation. For example:</p> <ul> <li>AVM FRITZ!Box</li> <li>Google Nest</li> </ul>"},{"location":"user-guide/dns-rebind-protection/#use-external-dns","title":"Use external DNS","text":"<p>Use an external DNS service. For example:</p> <ul> <li>Cloudflare</li> <li>Google</li> </ul>"},{"location":"user-guide/dns-rebind-protection/#add-to-etchosts","title":"Add to <code>/etc/hosts</code>","text":"<p>Add this to your <code>/etc/hosts</code>:</p> <pre><code>127.0.0.1 bar.localtest.me\n127.0.0.1 foo.localtest.me\n127.0.0.1 keycloak.localtest.me\n</code></pre>"},{"location":"user-guide/metrics/","title":"Metrics","text":"<p>By default, MORP exposes Prometheus metrics at http://localhost:8081/actuator/prometheus.</p> <p>Metrics can be configured to include the tenant as an additional dimension:</p> <pre><code>morp:\n  metrics:\n    tenantdimension:\n      enabled: true\n</code></pre> <p>Warning</p> <p>When having many tenants, enabling this feature can lead to a vast amount of timeseries being created in Prometheus!</p>"},{"location":"user-guide/oauth2/","title":"OAuth2","text":""},{"location":"user-guide/oauth2/#client-registrations","title":"Client Registrations","text":""},{"location":"user-guide/oauth2/#providers","title":"Providers","text":""},{"location":"user-guide/oauth2/#tenant-specific-overrides","title":"Tenant-specific Overrides","text":""},{"location":"user-guide/routing/","title":"Routing","text":"<p>Routing in MORP uses Spring Cloud Gateway. A basic route could be configured like this:</p> <pre><code>spring:\n  cloud:\n    gateway:\n      routes:\n        - id: my_route\n          uri: https://example.org\n          predicates:\n            - Path=/{tenant}/example\n</code></pre> <p>With this routing configuration, MORP will forward any traffic arriving at <code>/{tenant}/example</code> to https://example.com. <code>{tenant}</code> is a special URI template variable used by MORP to determine the tenant ID.</p>"},{"location":"user-guide/routing/#tenant-id-extraction","title":"Tenant ID Extraction","text":"<p>A tenant is how MORP names a customer, an application or a department. Each tenant is identified by a unique tenant ID. To figure out the tenant for a request, MORP uses predicates. MORP supports the following predicates:</p> Tenant Extractor Example Configuration Example Request Example Tenant <code>Host</code> <pre>Host={tenant}.example.com</pre> foo.example.com foo <code>Host</code> <pre>Host={stage}-{tenant}.example.com\ndev-foo.example.com\nfoo\n<code>Path</code>\n<pre>Path=example.com/tenant/{tenant}</pre>\nexample.com/tenant/foo\nfoo\n<code>Path</code>\n<pre>Path=example.com/api/{version}/tenant/{tenant}</pre>\nexample.com/api/v1/tenant/foo\nfoo\n<code>TenantFromHost</code>\n<pre>name: TenantFromHostargs:  patterns:    - static.localtest.me:8080    - another-static.localtest.me:8080  tenant: foo</pre>\nstatic.example.com\nfoo\n<code>TenantFromHeader</code>\n<pre>TenantFromHeader=X-Tenant-ID,{tenant}</pre>\nX-Tenant-ID: foo\nfoo\n<p>Predicates are configured in the <code>spring.cloud.gateway.routes[*].predicates</code> section and are applied per route. When no\ntenant is extracted for a request, the request will fail.</p>\n<p>The extracted tenant ID is used to determine how the request will be authenticated. See\nConfiguration on how to configure authentication.</p>"},{"location":"user-guide/session/","title":"Session Storage","text":""}]}