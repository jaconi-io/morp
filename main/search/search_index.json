{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MORP is a multi-tenant OpenID Connect reverse proxy. With MORP you can protect web services and applications that do not support authentication on their own. MORP takes care of the OpenID Connect \"dance\" using common identity providers like Google, GitHub, Okta, and Keycloak. Motivation There are several excellent OAuth2 and OpenID Connect proxies out there today that can be used to protect you backend apps. However, existing implementations typically only support a single tenant (with a single identity provider). MORP aims at making multi-tenancy a first class citizen so that you can run apps on behalf of different tenants that may be using different identity providers to authenticate users. Key Features Flexible tenant identification based host name, request paths or headers Fully templatized IDP configuration Dynamic discovery of IDP secrets Planned Persistence of IDP state for high availability Demo This project contains an example showing how to protect a httpbin instance using authentication with Keycloak. Run the example by switching to the example folder and using docker compose : docker compose -f compose/docker-compose.yaml -f compose/docker-compose.demo.yaml up Open http://foo.localtest.me:8080 in your browser and log in with the username test.user@jaconi.io and the password user . To use a different tenant, open http://bar.localtest.me:8080 in your browser and log in with username test.user@example.com and the password user . If you are having troubles accessing http://localtest.me , see DNS Rebind Protection .","title":"Home"},{"location":"#motivation","text":"There are several excellent OAuth2 and OpenID Connect proxies out there today that can be used to protect you backend apps. However, existing implementations typically only support a single tenant (with a single identity provider). MORP aims at making multi-tenancy a first class citizen so that you can run apps on behalf of different tenants that may be using different identity providers to authenticate users.","title":"Motivation"},{"location":"#key-features","text":"Flexible tenant identification based host name, request paths or headers Fully templatized IDP configuration Dynamic discovery of IDP secrets Planned Persistence of IDP state for high availability","title":"Key Features"},{"location":"#demo","text":"This project contains an example showing how to protect a httpbin instance using authentication with Keycloak. Run the example by switching to the example folder and using docker compose : docker compose -f compose/docker-compose.yaml -f compose/docker-compose.demo.yaml up Open http://foo.localtest.me:8080 in your browser and log in with the username test.user@jaconi.io and the password user . To use a different tenant, open http://bar.localtest.me:8080 in your browser and log in with username test.user@example.com and the password user . If you are having troubles accessing http://localtest.me , see DNS Rebind Protection .","title":"Demo"},{"location":"configuration/","text":"To configure MORP three terms are essential: provider, registration, and tenant. Configuration of all three is covered in the next sections. Provider A provider refers to an identity provider (IDP). Common IDPs include Google, Okta, and Keycloak. Providers are configured in the morp.oauth-client.provider section. A minimal provider configuration for a single Keycloak realm looks like this: morp: oauth2-client: provider: keycloak: issuer-uri: https://keycloak.example.com/realms/example The providers name ( keycloak , in the example above) can be any identifier. Every provider can have the following properties: Property Example authorization-uri https://example.com/authorize token-uri https://example.com/token jwk-set-uri https://example.com/jwks.json user-info-uri https://example.com/userinfo user-info-authentication-method header userNameAttribute name Alternatively, an issuer-uri can be specified to automatically get the identity providers configuration . Properties in the provider section can be templated, to include the tenant (see below). To use a Keycloak realm per tenant, use the following configuration: morp: oauth2-client: provider: keycloak: issuer-uri: https://keycloak.example.com/realms/{tenant} Registration Providers cannot be used for authentication by default. A registration is required to specify additional configuration. This allows multiple registrations per provider. Registrations are configured in the documentations morp.oauth-client.registration section: morp: oauth2-client: registration: keycloak: client-id: my-client-id client-secret: my-client-secret scope: - openid - profile - email The following properties are supported: Property Example client-id my-client-id client-secret my-client-secret client-name My Client provider keycloak scope user redirect-uri-template https://example.com client-authentication-method basic authorization-grant-type authorization_code Usually, only client-id and client-secret are required. Tenant A tenant is the entity determining the registration to be used. This might be a customer, an application or a department. To figure out the tenant for a request, MORP uses predicates. See Tenant Extraction for details.","title":"Configuration"},{"location":"configuration/#provider","text":"A provider refers to an identity provider (IDP). Common IDPs include Google, Okta, and Keycloak. Providers are configured in the morp.oauth-client.provider section. A minimal provider configuration for a single Keycloak realm looks like this: morp: oauth2-client: provider: keycloak: issuer-uri: https://keycloak.example.com/realms/example The providers name ( keycloak , in the example above) can be any identifier. Every provider can have the following properties: Property Example authorization-uri https://example.com/authorize token-uri https://example.com/token jwk-set-uri https://example.com/jwks.json user-info-uri https://example.com/userinfo user-info-authentication-method header userNameAttribute name Alternatively, an issuer-uri can be specified to automatically get the identity providers configuration . Properties in the provider section can be templated, to include the tenant (see below). To use a Keycloak realm per tenant, use the following configuration: morp: oauth2-client: provider: keycloak: issuer-uri: https://keycloak.example.com/realms/{tenant}","title":"Provider"},{"location":"configuration/#registration","text":"Providers cannot be used for authentication by default. A registration is required to specify additional configuration. This allows multiple registrations per provider. Registrations are configured in the documentations morp.oauth-client.registration section: morp: oauth2-client: registration: keycloak: client-id: my-client-id client-secret: my-client-secret scope: - openid - profile - email The following properties are supported: Property Example client-id my-client-id client-secret my-client-secret client-name My Client provider keycloak scope user redirect-uri-template https://example.com client-authentication-method basic authorization-grant-type authorization_code Usually, only client-id and client-secret are required.","title":"Registration"},{"location":"configuration/#tenant","text":"A tenant is the entity determining the registration to be used. This might be a customer, an application or a department. To figure out the tenant for a request, MORP uses predicates. See Tenant Extraction for details.","title":"Tenant"},{"location":"deployment/","text":"Deployment Guide Coming soon","title":"Deployment Guide"},{"location":"deployment/#deployment-guide","text":"Coming soon","title":"Deployment Guide"},{"location":"user-guide/caching/","text":"Client Registration Caching","title":"Client Registration Caching"},{"location":"user-guide/caching/#client-registration-caching","text":"","title":"Client Registration Caching"},{"location":"user-guide/diagnostics/","text":"MORP comes with actuator endpoints to help diagnosing routing and request authentication issues. The Spring actuator endpoints are exposed on port 8081 by default. You may find the following endpoints most useful: GET /actuator/gateway/routes provides a list of routes configured. GET /actuator/gateway/routes/{id} provides details about a given route based on its ID. GET /actuator/clientregistrations provides a list of tenants for which client registrations have been created dynamically. GET /actuator/clientregistrations/{tenant} provides details of a client registration for a given tenant.","title":"Diagnostics"},{"location":"user-guide/dns-rebind-protection/","text":"DNS Rebind Protection If you are having troubles accessing http://localtest.me , check if your router does DNS rebind protection. There are various options to avoid this problem. Add Exception You can add an exception for the following domains in your routers configuration: bar.localtest.me foo.localtest.me keycloak.localtest.me For instructions see your router vendors documentation. For example: * AVM FRITZ!Box * Google Nest Use external DNS Use an external DNS service. For example: Cloudflare Google Add to /etc/hosts Add this to your /etc/hosts : 127.0.0.1 bar.localtest.me 127.0.0.1 foo.localtest.me 127.0.0.1 keycloak.localtest.me","title":"DNS Rebind Protection"},{"location":"user-guide/dns-rebind-protection/#dns-rebind-protection","text":"If you are having troubles accessing http://localtest.me , check if your router does DNS rebind protection. There are various options to avoid this problem.","title":"DNS Rebind Protection"},{"location":"user-guide/dns-rebind-protection/#add-exception","text":"You can add an exception for the following domains in your routers configuration: bar.localtest.me foo.localtest.me keycloak.localtest.me For instructions see your router vendors documentation. For example: * AVM FRITZ!Box * Google Nest","title":"Add Exception"},{"location":"user-guide/dns-rebind-protection/#use-external-dns","text":"Use an external DNS service. For example: Cloudflare Google","title":"Use external DNS"},{"location":"user-guide/dns-rebind-protection/#add-to-etchosts","text":"Add this to your /etc/hosts : 127.0.0.1 bar.localtest.me 127.0.0.1 foo.localtest.me 127.0.0.1 keycloak.localtest.me","title":"Add to /etc/hosts"},{"location":"user-guide/metrics/","text":"By default, MORP exposes Prometheus metrics at http://localhost:8081/actuator/prometheus . Metrics can be configured to include the tenant as an additional dimension: morp: metrics: tenantdimension: enabled: true Warning When having many tenants, enabling this feature can lead to a vast amount of timeseries being created in Prometheus!","title":"Metrics"},{"location":"user-guide/oauth2/","text":"OAuth2 Client Registrations Providers Tenant-specific Overrides","title":"OAuth2"},{"location":"user-guide/oauth2/#oauth2","text":"","title":"OAuth2"},{"location":"user-guide/oauth2/#client-registrations","text":"","title":"Client Registrations"},{"location":"user-guide/oauth2/#providers","text":"","title":"Providers"},{"location":"user-guide/oauth2/#tenant-specific-overrides","text":"","title":"Tenant-specific Overrides"},{"location":"user-guide/routing/","text":"Routing Routing in MORP uses Spring Cloud Gateway . A basic route could be configured like this: spring: cloud: gateway: routes: - id: my_route uri: https://example.org predicates: - Path=/{tenant}/example With this routing configuration, MORP will forward any traffic arriving at /{tenant}/example to https://example.com . {tenant} is a special URI template variable used by MORP to determine the tenant ID. Tenant ID Extraction A tenant is how MORP names a customer, an application or a department. Each tenant is identified by a unique tenant ID. To figure out the tenant for a request, MORP uses predicates. MORP supports the following predicates: Tenant Extractor Example Configuration Example Request Example Tenant Host Host={tenant}.example.com foo.example.com foo Host Host={stage}-{tenant}.example.com dev-foo.example.com foo Path Path=example.com/tenant/{tenant} example.com/tenant/foo foo Path Path=example.com/api/{version}/tenant/{tenant} example.com/api/v1/tenant/foo foo TenantFromHost name: TenantFromHost args: patterns: - static.localtest.me:8080 - another-static.localtest.me:8080 tenant: foo static.example.com foo TenantFromHeader TenantFromHeader=X-Tenant-ID,{tenant} X-Tenant-ID: foo foo Predicates are configured in the spring.cloud.gateway.routes[*].predicates section and are applied per route. When no tenant is extracted for a request, the request will fail. The extracted tenant ID is used to determine how the request will be authenticated. See Configuration on how to configure authentication.","title":"Routing"},{"location":"user-guide/routing/#routing","text":"Routing in MORP uses Spring Cloud Gateway . A basic route could be configured like this: spring: cloud: gateway: routes: - id: my_route uri: https://example.org predicates: - Path=/{tenant}/example With this routing configuration, MORP will forward any traffic arriving at /{tenant}/example to https://example.com . {tenant} is a special URI template variable used by MORP to determine the tenant ID.","title":"Routing"},{"location":"user-guide/routing/#tenant-id-extraction","text":"A tenant is how MORP names a customer, an application or a department. Each tenant is identified by a unique tenant ID. To figure out the tenant for a request, MORP uses predicates. MORP supports the following predicates: Tenant Extractor Example Configuration Example Request Example Tenant Host Host={tenant}.example.com foo.example.com foo Host Host={stage}-{tenant}.example.com dev-foo.example.com foo Path Path=example.com/tenant/{tenant} example.com/tenant/foo foo Path Path=example.com/api/{version}/tenant/{tenant} example.com/api/v1/tenant/foo foo TenantFromHost name: TenantFromHost args: patterns: - static.localtest.me:8080 - another-static.localtest.me:8080 tenant: foo static.example.com foo TenantFromHeader TenantFromHeader=X-Tenant-ID,{tenant} X-Tenant-ID: foo foo Predicates are configured in the spring.cloud.gateway.routes[*].predicates section and are applied per route. When no tenant is extracted for a request, the request will fail. The extracted tenant ID is used to determine how the request will be authenticated. See Configuration on how to configure authentication.","title":"Tenant ID Extraction"},{"location":"user-guide/session/","text":"Session Storage","title":"Session Storage"},{"location":"user-guide/session/#session-storage","text":"","title":"Session Storage"}]}