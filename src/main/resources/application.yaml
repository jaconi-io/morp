management:
  endpoint:
    health:
      probes:
        enabled: true
    prometheus:
      enabled: true
  endpoints:
    web:
      exposure:
        include:
          - health
          - prometheus
  metrics:
    distribution:
      percentiles-histogram:
        spring.cloud.gateway.requests: true
    tags:
      application: ${spring.application.name}
    web:
      client:
        request:
          autotime:
            percentiles-histogram: true
      server:
        request:
          autotime:
            percentiles-histogram: true
  server:
    port: 8081

spring:
  application:
    name: morp
  thymeleaf:
    cache: false
  main:
    banner-mode: off
  session:
    # To enable Redis set 'store-type' to 'redis'
    # Local redis can be started like this: `docker run -p 6379:6379 redis`
    store-type: none
  cache:
    type: ${morp.cache.type:caffeine}

# Non-spring configuration goes here!
morp:
  # persistence type: Sets the spring.cache.type property and restricts its values to caffeine and redis
  cache:
    type: caffeine
    duration-in-minutes: 0

  # The tenant extractors determine the tenant ID for each request. The first extractor returning a match will be used.
  tenant-extractors: []
    # Extract the tenant ID from the hostname:
    # - host-pattern:
    #     pattern: ([a-z]+).example.com

    # Extract the tenant ID from the hostname, when having multiple capture groups in the pattern:
    # - host-pattern:
    #     pattern: (dev|stg|prd)-([a-z]+).example.com
    #     capture-group: 2

    # Statically map hostnames tenant IDs:
    # - host-mapping:
    #     foo.example.com: customer-foo
    #     bar.example.com: customer-bar

    # Extract the tenant ID from the path:
    # - path-pattern:
    #     pattern: /tenant/([a-z]+)

    # Extract the tenant ID from the path, when having multiple capture groups in the pattern:
    # - path-pattern:
    #     pattern: /api/(v1|v2)/([a-z]+)
    #     capture-group: 2

    # Extract the tenant ID from a header.
    # - header:
    #     name: X-Tenant-ID

---
spring.config.activate.on-profile:
  - wiretap

spring.cloud.gateway:
  httpclient:
    wiretap: true
  httpserver:
    wiretap: true

---
spring.config.activate.on-profile:
  - wiretap
  - test

logging.level:
  org.springframework.cloud.gateway: DEBUG
  org.springframework.http.server.reactive: DEBUG
  org.springframework.web.reactive: DEBUG
  org.springframework.security: DEBUG
  reactor.netty.http.client.HttpClient: DEBUG
  reactor.netty.http.server.HttpServer: DEBUG
